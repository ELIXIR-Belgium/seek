<div id="tbl_file_content">
    <%= button_link_to('Add Row', 'add', '#', {id: 'an', onclick: "AddRow('.sampleTable')"}) %>
    <%= button_link_to('Add Column', 'add', '#', id: 'sample_add_col') %>
    <%= button_link_to('Delete Row(s)', 'destroy', '#', id: 'sample_delete') %>
    <%= button_link_to('Hide optionals', 'denied', '#', id: 'hide_optionals') %>
    <a class="btn btn-primary btn-sm pull-right" onclick="saveSamples()">Save</a>
    <div class="sampleTblContainer">
        <table style="width: auto;margin-bottom:0" class="tableXs sampleTable">
            <thead class="thead-dark">
                <tr class="topHeader"></tr>
                <tr class="downHeader"></tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>
<style>
    .sampleTblContainer {
        overflow-x: scroll;
        margin-top: 10px
    }

    select {
        min-width: 150px
    }
</style>
<script>
    function load_samples() {
        $j.ajax({
            type: 'GET',
            cache: false,
            url: `/single_pages/${pid}/sample_table/${selectedItem.id}`,
            success: res => {
                if (res.data) {
                    console.log(res.data)
                    // Remove link_id for now --> Is it needed in the future??
                    // const header = $j.grep(res.data.header, (n, i) => n.title != "link_id")
                    loadSampleTableHeader(res.data.header, ".sampleTable")
                    loadSampleData(res.data.samples, res.data.header)
                    hideAttributes()
                    validateTable()
                } else {
                    $j('.sampleTable').html(
                        '<table class="table tableXs sampleTable"><thead class="thead-dark"><tr></tr></thead><tbody></tbody></table>'
                    );
                }
            }
        })
    }

    function loadSampleTableHeader(headers, tableClass) {
        const headTr = $j(`${tableClass} .downHeader`)
        // Adds the select column
        headTr.empty().append("<th><input id='selectAll' onClick='selectAll(this)' type='checkbox'/></th>")
        $j(headers).each((i, x) => {
            const TH = customTD(x.sample_controlled_vocab_id, x.title, x.required, x.sample_type_id)
            headTr.append(TH)
        })
        $j(`${tableClass} .topHeader th`).attr("colspan", headers.length + 1)
    }

    function loadSampleData(data, headers) {
        $j('.sampleTable tbody').empty()
        const rows = consolidateRows(data)
        $j(rows).each((i, row) => {
            let newRow = "<td><input type='checkbox'/></td>"
            $j.each(headers, (i, x) => {
                const sampleVal = findSampleVal(row, x)
                newRow += createTD(sampleVal)
            })
            $j('.sampleTable tbody').append(`<tr>` + newRow + '</tr>')
        })
        // Set the Auto Complete
        $j.each($j('.sampleTable tbody tr td:not(:first-child)'), (i, k) => {
            const sample_controlled_vocab_id = $j(k).closest('table').find('th').eq($j(k).index()).attr("sample_controlled_vocab_id")
            setAutoComplete(k, sample_controlled_vocab_id)
        })

    }

    function findSampleVal(row, key) {
        let result = {
            text: "",
            sampleId: "",
            editable: key.title == "link_id" ? "" : "contenteditable"
        }
        let link_id = ""
        $j.each(row, (n, samplePart) => {
            //samplePart.data[key.title] != undefined &&
            if (!link_id && key.title == "link_id") link_id = samplePart.data[key.title]
            if (key.sample_type_id == samplePart.sampleTypeid) {
                result.text = samplePart.data[key.title]
                result.sampleId = samplePart.sampleId
                return
            }
        })
        result.text = link_id ? link_id : result.text
        return result
    }

    function createTD(sampleVal) {
        const {
            text,
            sampleId,
            editable
        } = sampleVal
        return `<td ${editable} data-sampleid=${sampleId}>` + text + "</td>"
    }

    function consolidateRows(data) {
        const sourceSamples = data[0]
        delete data[0]
        let rows = []
        $j(sourceSamples).each((i, row) => {
            let tableRow = [{
                sampleId: row.id,
                data: JSON.parse(row.data),
                sampleTypeid: row.sample_type_id
            }]
            $j(Object.keys(data)).each((j, x) => {
                // TO_DO: check the following code in case of more sample existance
                // TO_DO: Get sourceSamples Link_id and search it in other records...
                if (data[x][i]) {
                    tableRow.push({
                        sampleId: data[x][i].id,
                        data: JSON.parse(data[x][i].data),
                        sampleTypeid: data[x][i].sample_type_id
                    })
                } else {
                    tableRow.push({
                        sampleId: "",
                        data: {},
                        sampleTypeid: ""
                    })
                }
            })
            rows.push(tableRow)
        })
        return rows
    }

    function validateTable() {
        // Checks which cells are rquired and not yet filled
        let valid = true
        const required = $j.map($j('.sampleTable .downHeader th').get(), (x, i) => !x.children.length > 0)
        const rows = $j('.sampleTable tbody tr').get()
        $j.each(rows, (i, row) => {
            if (!$j(row).attr("delete")) {
                const tds = $j(row).find('td').get()
                $j.each(tds, (j, td) => {
                    if (required[j] && $j(td).html() == "") {
                        $j(td).addClass('errorCell');
                        valid = false
                    } else {
                        $j(td).removeClass('errorCell');
                    }
                })
            }
        })
        return valid
    }

    function saveSamples() {
        if (!validateTable()) {
            alert('Please fill the required fields.')
            return
        }

        // Get the new list of sample types and samples with their attributes
        let header = $j('.sampleTable .downHeader th')
        const headerValue = $j.map(header, (x, i) => $j(x).html().replace(/<(?:.|\n)*?>/gm, '').trim())
        const _sampleTypes = $j.map(header, (x, i) => ({
            sampleTypeId: $j(x).attr("data-sampletypeid"),
            text: $j(x).html().replace(/<(?:.|\n)*?>/gm, '').trim()
        }))
        // Get all the rows of the table
        const rows = $j('.sampleTable tbody tr').get();
        let samples = []
        for (let i = 0; i < rows.length; i++) {
            samples.push(...splitSamples(rows[i], _sampleTypes))
        }
        // let sampleTypes = getSampleTypes(_sampleTypes);
        //----------------SAMPLE_TYPES UPDATE-----------------
        // TO-DO: Check if the sample types has changed?
        // updateSampleType(sampleTypes) // Will the jsonp_metadata of samples be updated automatically??
        //----------------SAMPLES UPDATE-----------------
        const updateSamples = $j.grep(samples, (x) => x.sampleId && !x.delete)
        console.log("updateSamples", updateSamples)
        // TO-DO: Update only the samples that are changes
        updateSample(updateSamples)
        //----------------SAMPLES CREATE-----------------
        const createSamples = $j.grep(samples, (x) => !x.sampleId && !x.delete)
        console.log("createSamples", createSamples)
        createSample(createSamples)
        //----------------SAMPLES DELETE-----------------
        const deleteSamples = $j.grep(samples, (x) => x.delete && x.sampleId)
        console.log("deleteSamples", deleteSamples)
        deleteSample(deleteSamples)

    }

    function getSampleTypes(a) {
        let s = []
        for (let i = 0; i < a.length; i++) {
            if (s.length == 0 || a[i].sampleTypeId != s[s.length - 1].id) {
                s.push({
                    "id": a[i].sampleTypeId,
                    "attributes": [a[i].text]
                })
            } else {
                s[s.length - 1].attributes.push(a[i].text)
            }
        }
        return s
    }

    function splitSamples(row, header) {
        let JSONMetadata = {}
        let samples = []
        $j.each($j(row).find('td'), (i, td) => {
            if (i > 0) //Skips the select column
            {
                if (samples.length == 0 || header[i].sampleTypeId != samples[samples.length - 1].sampleTypeId) {
                    samples.push({
                        sampleId: $j(td).attr("data-sampleid"),
                        sampleTypeId: header[i].sampleTypeId,
                        JSONMetadata: {
                            [`${header[i].text}`]: $j(td).html()
                        },
                        delete: $j(td).parent().attr("delete") ? true : false
                    })
                } else {
                    $j.extend(true, samples[samples.length - 1].JSONMetadata, {
                        [`${header[i].text}`]: $j(td).html()
                    });
                }
            }
        })
        return samples
    }

    function updateSampleType(sampleTypes) {
        $j.each(sampleTypes, (k, sampleType) => {
            const data = {
                "data": {
                    "type": "sample_types",
                    "id": sampleType.id,
                    "attributes": {
                        "attribute_map": $j.map(sampleType.attributes, (x, i) => ({
                            //  "id": "57",
                            "title": x,
                            "sample_attribute_type": {
                                "id": "8"
                            }
                        }))
                    }
                }
            }
            $j.ajax({
                method: 'POST',
                "headers": {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                },
                cache: false,
                url: '/sample_types',
                data: JSON.stringify(data),
                success: s => {
                    console.log('sampleType was updated successfully! : ' + s.data.id)
                },
                error: (e) => {
                    alert('An error occurred when updating the sampleType')
                }
            })
        })
    }

    function updateSample(samples) {
        $j.each(samples, (k, sample) => {
            const data = {
                "data": {
                    "type": "samples",
                    "attributes": {
                        "attribute_map": sample.JSONMetadata
                    }
                }
            }
            $j.ajax({
                method: 'PUT',
                "headers": {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                },
                cache: false,
                url: `/samples/${sample.sampleId}`,
                data: JSON.stringify(data),
                success: s => {
                    console.log('The sample was updated successfully! : ' + s.data.id)
                },
                error: (e) => {
                    alert('An error occurred when updating the sample')
                }
            })
        })
    }

    function createSample(samples) {
        $j.each(samples, (k, sample) => {
            const data = {
                "data": {
                    "type": "samples",
                    "attributes": {
                        "title": "sample",
                        "attribute_map": sample.JSONMetadata,
                        "tags": null
                    },
                    "relationships": {
                        "sample_type": {
                            "data": {
                                "id": sample.sampleTypeId,
                                "type": "sample_types"
                            }
                        },
                        "projects": {
                            "data": [{
                                "id": pid,
                                "type": "projects"
                            }]
                        }
                    }
                }
            }
            $j.ajax({
                method: 'POST',
                "headers": {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                },
                cache: false,
                url: '/samples',
                data: JSON.stringify(data),
                success: s => {
                    console.log('The sample was created successfully! : ' + s.data.id)
                },
                error: (e) => {
                    console.log(e)
                    alert('An error occurred when creating the sample')
                }
            })
        })
    }

    function deleteSample(samples) {
        $j.each(samples, (k, sample) => {
            $j.ajax({
                method: 'DELETE',
                "headers": {
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                },
                cache: false,
                url: `/samples/${sample.sampleId}`,
                success: s => {
                    console.log('The sample was deleted successfully!')
                },
                error: (e) => {
                    alert('An error occurred when deleting the sample')
                }
            })
        })
    }

    function addCustomCol(tblClass, bias, text = '') {
        if (text.length == 0) text = $j.trim($j('.customCol').val())
        $j(".arrow_box").css({
            display: "none",
        });
        let options = {
            title: text,
            tableClass: tblClass,
            bias
        }
        addColumn(options)
    }

    function AddRow(table) {
        let rowCount = $j(table).rowcount() + 1;
        let newRow = "<td><input type='checkbox'/></td>";
        let rowId = uniqId()
        $j(table + ' .downHeader').find('th').each(function(k, v) {
            if (k > 0) // Skips the select column
                newRow += $j.trim($j(v).text().toLowerCase()) == "link_id" ? `<td>${rowId}</td>` :
                '<td contenteditable></td>'
        });
        $j(table + ' tbody').append('<tr data-new="true">' + newRow + '</tr>')
        // Set the Auto Complete
        $j.each($j('.sampleTable tbody tr:last td:not(:first-child)'), (i, k) => {
            const sample_controlled_vocab_id = $j(k).closest('table').find('th').eq($j(k).index()).attr("sample_controlled_vocab_id")
            setAutoComplete(k, sample_controlled_vocab_id)
        })
        hideAttributes()
    }

    function uniqId() {
        // return Math.random().toString(36).replace(/[^1-z]+/g, '').substr(0, 5);
        var result = '';
        var characters = 'abcdefghijklmnopqrstuvwxyz0123456789';
        var charactersLength = characters.length;
        for (var i = 0; i < 8; i++) {
            result += characters.charAt(Math.floor(Math.random() * charactersLength));
        }
        return result;
    }

    $j.fn.columnCount = function() {
        return $j('th', $j(this).find('thead')).length;
    };

    $j.fn.rowcount = function() {
        return $j('tr', $j(this).find('tbody')).length;
    };

    function update_method(std_id, asy_id, content) {
        $j.ajax({
            type: 'PATCH',
            cache: false,
            url: pid + '/update_method',
            data: {
                std_id,
                asy_id,
                content
            },
            success: result => {
                alert('Content saved successfully!')
            }
        })
    }

    function setAutoComplete(e, sample_controlled_vocab_id) {
        $j(e).bind("keyup", function(event) {
            AutoComplete(e, sample_controlled_vocab_id)
        })
    }

    function AutoComplete(e, sample_controlled_vocab_id) {
        const setSource = (data) => {
            $j(e).autocomplete({
                classes: {
                    "ui-autocomplete": "highlight"
                },
                source: data || [],
                mustMatch: true
            })
        }
        const url = `/single_pages/${pid}/ontology?sample_controlled_vocab_id=${sample_controlled_vocab_id}&query=${$j(e).html()}`
        $j.ajax({
            method: 'GET',
            dataType: "json",
            url,
            complete: function(jqXHR, textStatus) {
                const data = jqXHR.responseJSON.data
                setSource(data)
                $j(e).autocomplete("search", 'a');
            },
            error: function(e) {
                console.log(e)
            }
        })
    }

    function sample_add_row(tblClass) {
        AddRow(tblClass)
        // Add the remove button
        let action =
            "<a href='' onclick='remove_tr(event)' class=''> <span class='glyphicon glyphicon-trash'></span></a>"
        $j(tblClass).each(function(i, t) {
            if ($j(t).find('.downHeader th:last').attr("class") != 'rem') $j(t).children('thead').children(
                'tr').append("<th class='rem' style='width:50px;'></th>")
            let headerCount = $j(t).find('.downHeader th').length
            $j(t).children('tbody').children('tr').each(function(i, g) {
                if ($j(g).find('td').length == headerCount) {
                    $j(g).find('td:last').html(action)
                    $j(g).find('td:last').attr("contenteditable", "false")
                } else $j(g).append(
                    `<td class='rem' rowspan=${$j(g).children('td:first').attr("rowspan")}>${action}</td>`
                )
            })
        })
    }
    $j("#sample_add_col").on("click", () => {
        showPreDefinedCols(event, '.sampleTable', 2)
    })

    function appendDropDown(items) {
        if (!items) return
        var select = "<select class='form-control'>"
        $j.each(items, (key, val) => {
            select += `<option>${val}</option>`
        })
        select += "</select>"
        return select
    }

    function selectAll(e) {
        const checkBoxes = $j(e).closest('table').find('tr td:first-child input')
        $j.each(checkBoxes, (i, k) => {
            k.checked = e.checked
        })
    }

    function deselectAll(e) {
        const checkBoxes = $j(e).closest('table').find('tr td:first-child input')
        $j.each(checkBoxes, (i, k) => {
            k.checked = false
        })
    }

    $j("#sample_delete").on("click", () => {
        if (confirm("Are you sure you want to delete the selected samples?")) {
            const selectedSamples = $j(".sampleTable tbody tr td:first-child")

            $j.each(selectedSamples, (i, k) => {
                if (($j(k).find("input")[0]).checked) {
                    $j(k).parent().attr("delete", true)
                    $j.each($j(k).parent().find("td"), (j, v) => {
                        $j(v).attr("contenteditable", false)
                            .css('background-color', '#cfcfcf')
                            .css('border-color', '#b5b5b5')
                            .css('text-decoration', 'line-through')
                    })
                }
            })
            deselectAll(this)
        }
    })

    function hideAttributes() {
        let colSpan = -1
        let itemCounter = 0
        const hiddenAttrs = manageVisibility("get").toString()
        const hiddenSampleTypes = manageVisibility("get", null, "sampleTypes").toString()
        $j('.sampleTable .topHeader').empty()
        $j('.sampleTable .topHeader').append(`<th colspan=1></th>`)

        $j.each($j('.sampleTable .downHeader th'), (i, th) => {
            const title = $j.trim($j(th).html().replace(/<a( |>).*?<\/a>/gi, ""))
            const sampleTypeId = $j(th).attr("data-sampletypeid")
            if (hiddenAttrs.includes(title) || (hiddenSampleTypes.includes(sampleTypeId) && title != "link_id")) { // Check with TH hidden list
                $j.each($j('.sampleTable tbody tr'), (i, tr) => {
                    $j(tr).find(`td:eq(${$j(th).index()})`).hide();
                });
                $j(th).hide()
            } else {
                colSpan++
                $j.each($j('.sampleTable tbody tr'), (i, tr) => {
                    $j(tr).find(`td:eq(${$j(th).index()})`).show();
                });
                $j(th).show()
            }
            if (title == "link_id") {
                $j(th).addClass("tableSeparate")
                const sampleTypeId = $j(th).attr("data-sampletypeid")

                $j('.sampleTable .topHeader').append(`<th class="headerSeparator" colspan=${colSpan}><input type='checkbox' onchange="toggleSampleType(${sampleTypeId})"/> ${itemCounter==0?"Source ":"Assay " + itemCounter}</th>`)
                colSpan = 0
                itemCounter++

                const status = hiddenSampleTypes.includes(sampleTypeId) ? false : true
                $j('.sampleTable .topHeader th').eq(itemCounter).find("input").attr('checked', status);
                // $j(th).find("i").attr('class', `glyphicon glyphicon-eye-${status}`)
                $j.each($j('.sampleTable tbody tr'), (i, tr) => {
                    $j(tr).find(`td:eq(${$j(th).index()})`).addClass("tableSeparate")
                });
            }
        })
    }

    function hideOptionalAttrs() {
        $j.each($j('.sampleTable .downHeader th'), (i, th) => {
            const optional = $j(th).attr("optional")
            const title = $j.trim($j(th).html().replace(/<a( |>).*?<\/a>/gi, ""))
            if (optional == "true") {
                $j.each($j('.sampleTable tbody tr'), (i, tr) => {
                    $j(tr).find(`td:eq(${$j(th).index()})`).hide();
                });
                $j(th).hide()
                manageVisibility("hide", title)
            }
        })
    }

    function toggleSampleType(id) {
        manageVisibility("toggle", id, "sampleTypes")
        hideAttributes()
    }

    function manageVisibility(action, item, field = "Attributes") {
        // localStorage.clear();
        // return
        if (item) item = item.toString()
        const std_id = selectedItem.parent.id
        const key = `${uid}_${pid}_${std_id}_dynamicTableHidden${field == "Attributes" ? field : "SampleTypes"}`
        if (!localStorage[key])
            localStorage[key] = JSON.stringify([]);
        let header = JSON.parse(localStorage[key])
        if (action == "unhide") {
            header = $j.grep(header, k => k != item)
        } else if (action == "hide") {
            if (!header.includes(item)) header.push(item)
        } else if (action == "get")
            return JSON.parse(localStorage[key])
        else if (action == "toggle") {
            if (!header.includes(item)) header.push(item)
            else header = $j.grep(header, k => k != item)
        }
        localStorage[key] = JSON.stringify(header);
    }


    $j("#hide_optionals").on("click", () => {
        hideOptionalAttrs()
    })
</script>