<div id="content-wrapper">
    <div class="inner">
        <div class="row">
            <div class="col-md-4">
                <label>Source characteristics:</label>
                <div class="input-group">
                    <select class="form-control" id="sourceSelect" onchange="sourceChange();">
                    </select>
                </div>
            </div>
        </div>
        <div class="row">
            <br />
            <div class="col-md-12">
                <label>Attributes list:</label>
                <div style="max-height:200px;overflow:scroll;border-radius:5px;border:1px #ddd solid;padding:10px">
                    <table class="sourceAttribs" id="sourceAttribs" style="width:100%;">
                        <thead>
                            <tr>
                                <th>Attribute</th>
                                <th>Short name</th>
                                <th style="width:50%">Description</th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <hr>
        <div id="sourceSampleTypeTable">
            <label>The source sample type will look like:</label>
            <%=  render partial: 'source_sample_type_table' %>
            <hr>
            <input id="btn-save-study-design" onClick="saveDesign()" value="Save Design" type="button" class="btn btn-primary">
        </div>
    </div>



</div>


<script>
    function addSourcesOptions() {
        $j('#sourceSelect').empty()
        $j.each(characteristics, (key, value) => {
            $j('#sourceSelect')
                .append($j("<option></option>")
                    .attr("value", key)
                    // .attr("sampleCVId", value.sampleCVId)
                    .text(value.title));
        })
        if (characteristics[0])
            $j.each(characteristics[0].attributes, (k, attr) => {
                $j("#sourceAttribs tbody").append(`<tr><td>${attr.title}</td><td>${attr.shortName}</td><td>${attr.des}</td></tr>`)
            })
    }

    function sourceChange() {

        let i = $j('#sourceSelect').val()
        $j("#sourceAttribs tbody").empty()
        $j("#sourceSelect").val(i)
        $j.each(characteristics[i].attributes, (k, attr) => {
            $j("#sourceAttribs tbody").append(`<tr><td>${attr.title}</td><td>${attr.shortName}</td><td>${attr.des}</td></tr>`)
        })

        // $j('.tbl_sample_source thead tr').empty()
        $j('.tbl_sample_source thead .downHeader').empty()
        $j(".tbl_sample_source .downHeader").empty()
        $j(".tbl_sample_source .topHeader").empty()
        $j.each(characteristics[sourceSelect.value].attributes, (k, attr) => {
            $j(".tbl_sample_source thead .downHeader").append(`<th>${attr.title}</th>`) //(customTD(attr.title,attr.required))
        })

        $j(".tbl_sample_source thead .downHeader").prepend(`<th class="ins" style='color:red'>Sample name</th>`)
        $j(".tbl_sample_source thead .downHeader").prepend(`<th class="ins" style='color:red'>Protocol REF</th>`)
        $j(".tbl_sample_source thead .downHeader").prepend(`<th class="ins" style='color:red'>Source name</th>`)
        $j(".tbl_sample_source thead .downHeader").prepend("<th><input id='selectAll' onClick='selectAll(this)' type='checkbox'/></th>")

        $j(".tbl_sample_source tbody").empty()
        let colspan = 1
        let newRow = "<td><input type='checkbox'/></td>";
        $j(".tbl_sample_source .downHeader").find('th').each(function(k, v) {
            if (k > 0) {
                colspan++
                if ($j(v).hasClass("ins"))
                    newRow += '<td contenteditable></td>'
                else
                    newRow += "<td style='background-color:#ccc'></td>"
            }
        });
        $j(".tbl_sample_source tbody").append('<tr data-new="true">' + newRow + '</tr>')
        $j(".tbl_sample_source .topHeader").append(`<th colspan=${colspan}>Source table</th>`)
    }


    function addColumn(options) {
        // let colCount = $j(`${options.tableClass} thead tr th:visible`).length;
        let colCount = $j(`${options.tableClass} thead tr:nth-child(2) th`).length;
        let thIndex = -1
        let existingCol = false;
        $j.each($j(options.tableClass + ' thead tr:nth-child(2) th:hidden'), (i, k) => {
            if ($j.trim($j(k).html().replace(/<a( |>).*?<\/a>/gi, "")) == options.title) {
                $j(k).show();
                thIndex = $j(k).index()
                existingCol = true;
                return false;
            }
        })
        // If no hidden th found, then add new column
        if (!existingCol) {
            console.log("ddd", colCount, options.tableClass, options.title)
            let action = "<a href='' onclick='remove_col(event)'> <span style='color:white' class='glyphicon glyphicon-trash'></span></a>"
            let element =
                `<th data-sampletypeid="" sample_controlled_vocab_id="" optional="true">${options.title} ${action}</th>`
            $j(options.tableClass).find('thead tr:nth-child(2)').find('th').eq(colCount - 1).after(element)

            //increase first header last td colspan
            const firstHeader = $j(options.tableClass).find('thead tr:first-child th:last-child')
            firstHeader.attr('colspan', firstHeader.attr('colspan') + 1);
        }

        $j(options.tableClass + ' tbody').find('tr').each(function() {
            if (existingCol)
                $j(this).find('td').eq(thIndex).show()
            else
                $j(this).find('td').eq(colCount - 1).after("<td contentEditable='true'></td>");
        });

        if (options.title)
            manageVisibility("unhide", options.title)
    }

    function createSampleType(sampleTypeData, cb) {
        $j.ajax({
            method: 'POST',
            "headers": {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cache: false,
            url: '/sample_types',
            data: JSON.stringify(sampleTypeData),
            success: s => {
                cb(s)
            },
            error: (e) => {
                console.log(e)
            }
        })
    }

    function saveDesign() {
        const callBack = (s) => {
            const data = {
                flowchart: {
                    study_id: selectedItem.id,
                    source_sample_type_id: s.data.id,
                    items: '[{"id": "", "left": 40, "top": 100}]'
                }
            }
            $j.ajax({
                method: 'POST',
                cache: false,
                dataType: "json",
                data,
                url: `/single_pages/${pid}/update_flowchart`,
                success: s => {
                    console.log("success", s.data)
                    loadFlowchart()
                },
                error: e => {
                    console.error(e)
                    hideFlowchart()
                }
            })
        }
        let attr = characteristics[$j("#sourceSelect").children("option:selected").val()].attributes
        // Add thise ISA stuff....
        const ISAStuff = [{
            id: null,
            required: true,
            title: "Source name"
        }, {
            id: null,
            required: true,
            title: "Protocol REF"
        }, {
            id: null,
            required: true,
            title: "Sample name"
        }]

        attr.unshift(...ISAStuff)

        // const sampleCVId = $j("#sourceSelect").children("option:selected").attr("samplecvid")
        const title = `${$j("#std-title span").html()}_source_sample_type`
        createSampleType(sampleTypeData(attr, title), callBack)
    }

    // loads sample source table header
    function loadDesign() {
        $j.ajax({
            method: 'GET',
            cache: false,
            dataType: "json",
            url: `/single_pages/${pid}/sample_source/${selectedItem.id}`,
            success: s => {
                $j('.tbl_sample_source thead tr').empty()
                if (s.data)

                    $j(s.data).each((i, x) => {
                        const TD = customTD(x.title, x.required)
                        $j('.tbl_sample_source thead tr').append(TD)
                    })
                else sourceChange()
            },
            error: e => {
                console.error(e)
            }
        })
    }

    function customTD(sample_controlled_vocab_id, title, required = true, info = null) {
        const action = required ? "" :
            "<a href='' onclick='remove_col(event)'> <span style='color:white' class='glyphicon glyphicon-trash'></span></a>"
        return `<th data-sampletypeid=${info} optional=${!required} sample_controlled_vocab_id="${sample_controlled_vocab_id}">${title} ${action}</th>`
    }

    function sampleTypeData(attributes, title, assayId = null) {
        // Create the Source Sample Type
        // Add table columns as attribute types
        // const headers = getHeaderText('.tbl_sample_source')
        const attributeMap = $j(attributes).map((i, x) => ({
            "title": x.title.toLowerCase(),
            "sample_attribute_type": {
                "id": "18"
            },
            "sample_controlled_vocab_id": x.id,
            "required": x.required,
            "pos": (i + 1).toString(),
            "unit_id": null,
            "is_title": i == 0 ? true : false,
            // "accessor_name": $j.trim(x.title.toLowerCase()).replace(/ /g, '_')
        })).get()
        //Add a custom ID attribute to the sample type, in order to link right samples of different sample types
        attributeMap.push({
            "title": "link_id",
            "sample_attribute_type": {
                "id": "8" //string
            },
            "required": true,
            "pos": (attributeMap.length + 1).toString(),
            "unit_id": null,
            "is_title": false,
            // "accessor_name": "link_id"
        })
        return {
            "data": {
                "type": "sample_types",
                "attributes": {
                    "title": title,
                    "description": '',
                    "attribute_map": attributeMap,
                    "tags": null
                },
                "relationships": {
                    "projects": {
                        "data": [{
                            "id": pid.toString(),
                            "type": "projects"
                        }]
                    },
                    "assays": {
                        "data": [{
                            "id": assayId,
                            "type": "assays"
                        }]
                    }
                }
            }
        }
    }

    function getHeaderText(tableClass) {
        return $j(`${tableClass} thead tr th`).map((i, x) => $j.trim($j(x).html().replace(/<a( |>).*?<\/a>/gi, ""))).get()
    }

    function copy(x) {
        return JSON.parse(JSON.stringify(x));
    }


    // Adds remove button for row
    function add_remove_action(tblClass = '.tableXs') {
        let action =
            "<a href='' onclick='remove_tr(event)' class=''> <span class='glyphicon glyphicon-trash'></span></a>"
        $j(tblClass).each(function(i, t) {
            $j(t).children('thead').children('tr').append("<th class='rem' style='width:50px;'></th>")
            $j(t).children('tbody').children('tr').each(function(i, g) {
                if ($j(g).children('td').length > (tblClass == '.designTbl' ? 1 :
                        0)) //1 for tables with rowspan
                    $j(g).append(
                        `<td class='rem' rowspan=${$j(g).children('td:first').attr("rowspan")}>${action}</td>`
                    )
            })
        })
    }

    function remove_tr(e) {
        event.preventDefault();
        let count = $j(e.target).closest('td').attr("rowspan")

        let first_item = $j(e.target).closest('tr')
        let tr_list = []
        tr_list.push(first_item)
        let item = first_item
        for (i = 0; i < count - 1; i++) {
            item = item.next('tr')
            tr_list.push(item)
        }
        $j(tr_list).each((i, t) => {
            $j(t).remove()
        })
    }

    function remove_col(e) {
        event.preventDefault();
        if (confirm("Do you really want to delete the column?")) {
            if ($j(e.target).closest('tr').find('th').length == 2) {
                alert('Can not remove column. \nThere sould be at least one column.')
                return
            }
            let th = $j(e.target).closest('th')
            $j(e.target).closest('table').find('tbody tr').each(function(i, tr) {
                $j(tr).find(`td:eq(${th.index()})`).hide();
            });
            th.hide()

            manageVisibility("hide", $j.trim(th.html().replace(/<a( |>).*?<\/a>/gi, "")))
        }
    }
</script>