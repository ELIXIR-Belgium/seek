<div id="content-wrapper">
    <div class="inner">
        <div class="row">
            <div class="col-md-4">
                <label>Source characteristics:</label>
                <div class="input-group">
                    <select class="form-control" id="sourceSelect" onchange="sourceChange(this);">
                    </select>
                    <span class="input-group-btn">
                        <input id="btn-apply-source" value="Apply" type="button" class="btn btn-primary">
                    </span>
                </div>
            </div>
        </div>
        <div class="row">
            <br />
            <div class="col-md-12">
                <label>Attributes list:</label>
                <div style="max-height:200px;overflow:scroll;border-radius:5px;border:1px #ddd solid;padding:10px">
                    <table class="sourceAttribs" id="sourceAttribs" style="width:100%;">
                        <thead>
                            <tr>
                                <th>Attribute</th>
                                <th>Short name</th>
                                <th style="width:50%">Description</th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <hr>
        <%=  render partial: 'source_sample_type_table' %>
        <hr>
        <input id="btn-save-study-design" onClick="saveDesign()" value="Save Design" type="button" class="btn btn-primary">
    </div>

   

</div>


<script>
    function addSourcesOptions() {
        $j('#sourceSelect').empty()
        $j.each(characteristics, (key, value) => {
            $j('#sourceSelect')
                .append($j("<option></option>")
                    .attr("value", key)
                    .text(value.title));
        })
        if (characteristics[0])
            $j.each(characteristics[0].attributes, (k, attr) => {
                $j("#sourceAttribs tbody").append(`<tr><td>${attr.title}</td><td>${attr.shortName}</td><td>${attr.des}</td></tr>`)
            })
    }

    function sourceChange(i) {
        $j("#sourceAttribs tbody").empty()
        $j("#sourceSelect").val(i.value)
        $j.each(sourceTypes[i.value].attributes, (k, attr) => {
            $j("#sourceAttribs tbody").append(`<tr><td>${attr.title}</td><td>${attr.shortName}</td><td>${attr.des}</td></tr>`)
        })
    }

    $j("#btn-apply-source").on("click", () => {
        $j.each(sourceTypes[sourceSelect.value].attributes, (k, attr) => {
            addAttrib(attr.title)
        })
    })

    function addAttrib(text) {
        let options = {
            title: text,
            tableClass: '.tbl_sample_source',
            useOntology: false,
            ableToRemove: false
        }
        addColumn(options)
    }

    function addColumn(options) {
        let {
            value = '',
                title,
                tableClass,
                bias = 1,
                acTerm = '',
                useOntology = true,
                ableToRemove = true,
                extraInfo = '',
                originalTitle = ''
        } = options

        let action = ableToRemove ?
            "<a href='' onclick='remove_col(event)'> <span style='color:white' class='glyphicon glyphicon-trash'></span></a>" :
            ""
        let colCount = $j(`${tableClass} thead tr th`).length;
        let assayId = $j("#selected_item_id").val()
        let element =
            `<th data-term="${acTerm}" data-info="${extraInfo||assayId}" data-original="${originalTitle}">${title} ${action}</th>`
        if (colCount == 0) {
            $j(tableClass).find('thead').find('tr').append(element);
        } else {
            $j(tableClass).find('thead').find('th').eq(colCount - bias).after(element)
        }
        $j(tableClass).find('tr').each(function() {
            $j(this).find('td').eq(colCount - bias).after(`<td contentEditable='true'>${value}</td>`);
        });

        if (acTerm && useOntology) {
            applyOntology(tableClass, colCount == 0 ? 1 : colCount - bias + 2, acTerm)
        }
    }

    function addTableRow(table, items = '', add_single = false) {
        let action =
            "<a href='' onclick='remove_tr(event)' class=''> <span class='glyphicon glyphicon-trash'></span></a>"
        let defaultCol = '<td contentEditable="true">$$</td>'
        let newRow, templates
        let headers = $j(`${table} thead tr`).find('th')
        let tdCount = headers.length
        // Exception for sampleTable
        if (table == ".sampleTable" || !items)
            templates = headers;
        else
            templates = items
        $j.each(templates, (i, a) => {
            if (items) {
                if (typeof(a) != 'string' && $j(a).data('original')) {
                    let tmp = items[$j(a).data('original')]
                    if (tmp) {
                        newRow += defaultCol.replace('$$', tmp.replace('undefined', ''))
                    } else {
                        newRow += defaultCol.replace('$$', '')
                    }
                } else {
                    newRow += defaultCol.replace('$$', a)
                }
            } else {
                newRow += defaultCol.replace('$$', '')
            }

            // newRow += items ?
            //     defaultCol.replace('$$', typeof(a) != 'string' && $j(a).data('original') ? items[$j(a).data(
            //         'original')].replace(
            //         'undefined', '') : a) :
            //     defaultCol.replace('$$', '');

            // Apply each column auto complete list
            // TO-DO: cache auto complete list response rather than Ajax call each time
            if (add_single) {
                let term = $j(`${table} thead tr th:nth-child(${i+1})`).data("term") || ''
                if (term.length > 1)
                    applyOntology(table, i + 1, term)
            }
        });
        $j(`${table} tbody`).append('<tr>' + newRow + '</tr>')
        if (add_single) {
            let td = $j(`${table} tbody tr:last td:last`)
            td.append(action)
            td.attr('contentEditable', false)
        }
    }

    function createSampleType(sampleTypeData, cb) {
        $j.ajax({
            method: 'POST',
            "headers": {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cache: false,
            url: '/sample_types',
            data: JSON.stringify(sampleTypeData),
            success: s => {
                cb(s)
            },
            error: (e) => {
                console.log(e)
            }
        })
    }

    function saveDesign() {
        const callBack = (s) => {
            const data = {
                flowchart: {
                    study_id: selectedItem.id,
                    source_sample_type_id: s.data.id,
                    items: '[{"id": "", "left": 40, "top": 100}]'
                }
            }
            $j.ajax({
                method: 'POST',
                cache: false,
                dataType: "json",
                data,
                url: `/single_pages/${pid}/update_flowchart`,
                success: s => {
                    console.log("success", s.data)
                    loadFlowchart()
                },
                error: e => {
                    console.error(e)
                    hideFlowchart()
                }
            })
        }
        const attr = characteristics[$j("#sourceSelect").children("option:selected").val()].attributes
        const title = `${$j("#std-title span").html()}_source_sample_type`
        createSampleType(sampleTypeData(attr, title), callBack)
    }

    // loads sample source table header
    function loadDesign() {
        $j.ajax({
            method: 'GET',
            cache: false,
            dataType: "json",
            url: `/single_pages/${pid}/sample_source/${selectedItem.id}`,
            success: s => {
                $j('.tbl_sample_source thead tr').empty()
                $j(s.data).each((i, x) => {
                    const TD = customTD(x.title, x.required)
                    $j('.tbl_sample_source thead tr').append(TD)
                })
            },
            error: e => {
                console.error(e)
            }
        })
    }

    function customTD(title, required = true, info = null) {
        const action = required ? "" :
            "<a href='' onclick='remove_col(event)'> <span style='color:white' class='glyphicon glyphicon-trash'></span></a>"
        return `<th data-sampletypeid=${info}>${title} ${action}</th>`
    }

    function sampleTypeData(attributes, title, assayId = null) {
        // Create the Source Sample Type
        // Add table columns as attribute types
        // const headers = getHeaderText('.tbl_sample_source')
        const attributeMap = $j(attributes).map((i, x) => ({
            "title": x.title,
            "sample_attibute_type": {
                "id": "8"
            },
            "required": x.required,
            "pos": (i + 1).toString(),
            "unit_id": null,
            "is_title": i == 0 ? true : false,
            "accessor_name": $j.trim(x.title).replace(/ /g, '_')
        })).get()
        //Add a custom ID attribute to the sample type, in order to link right samples of different sample types
        attributeMap.push({
            "title": "link_id",
            "sample_attibute_type": {
                "id": "8" //string
            },
            "required": true,
            "pos": (attributeMap.length + 1).toString(),
            "unit_id": null,
            "is_title": false,
            "accessor_name": "link_id"
        })
        return {
            "data": {
                "type": "sample_types",
                "attributes": {
                    "title": title,
                    "description": '',
                    "attribute_map": attributeMap,
                    "tags": null
                },
                "relationships": {
                    "projects": {
                        "data": [{
                            "id": pid.toString(),
                            "type": "projects"
                        }]
                    },
                    "assays": {
                        "data": [{
                            "id": assayId,
                            "type": "assays"
                        }]
                    }
                }
            }
        }
    }

    function getHeaderText(tableClass) {
        return $j(`${tableClass} thead tr th`).map((i, x) => $j.trim($j(x).html().replace(/<a( |>).*?<\/a>/gi, ""))).get()
    }

    function copy(x) {
        return JSON.parse(JSON.stringify(x));
    }


    // Adds remove button for row
    function add_remove_action(tblClass = '.tableXs') {
        let action =
            "<a href='' onclick='remove_tr(event)' class=''> <span class='glyphicon glyphicon-trash'></span></a>"
        $j(tblClass).each(function(i, t) {
            $j(t).children('thead').children('tr').append("<th class='rem' style='width:50px;'></th>")
            $j(t).children('tbody').children('tr').each(function(i, g) {
                if ($j(g).children('td').length > (tblClass == '.designTbl' ? 1 :
                        0)) //1 for tables with rowspan
                    $j(g).append(
                        `<td class='rem' rowspan=${$j(g).children('td:first').attr("rowspan")}>${action}</td>`
                    )
            })
        })
    }

    function remove_tr(e) {
        event.preventDefault();
        let count = $j(e.target).closest('td').attr("rowspan")

        let first_item = $j(e.target).closest('tr')
        let tr_list = []
        tr_list.push(first_item)
        let item = first_item
        for (i = 0; i < count - 1; i++) {
            item = item.next('tr')
            tr_list.push(item)
        }
        $j(tr_list).each((i, t) => {
            $j(t).remove()
        })
    }

    function remove_col(e) {
        event.preventDefault();
        if ($j(e.target).closest('tr').find('th').length == 2) {
            alert('Can not remove column. \nThere sould be at least one column.')
            return
        }
        let th = $j(e.target).closest('th')
        $j(e.target).closest('table').find('tbody tr').each(function(i, tr) {
            $j(tr).find(`td:eq(${th.index()})`).remove();
        });
        th.remove()
    }
</script>